#!/bin/bash -x
#
# Clem
#
# This script is used to start a virtual machine
# 
# For info see README

waitUntilCmdTrue() {
  cond=$1
  command=$2
  sleep=$3
  
  out=""
  while [ $cond ]; do
    out=`eval $command 2>&1`
    if [ $? -eq 0 ]; then
       break;
    fi
    echo "Sleeping $sleep seconds until command '$command' is true"
    sleep $sleep
  done
  echo $out
}

IPOP_SERVER_INFO="/opt/ipop/etc/ipopserver.info"
IPOP_CONFIG="/opt/ipop/etc/config.json"
IPOP_TURN_CONFIG="/opt/ipop/turn/etc/turn.conf"
IPOPSERVER_WAIT_PERIOD=5
IPOPCLIENT_WAIT_PERIOD=60
NAS_WAIT_PERIOD=10

if [ "x$#" != "x6" ]; then
    echo "This script should be invoked with 4 arguments"
    exit 1
fi

function error(){
    echo -e "Error $1"
    exit 1
}

# tree required arguments
temp_disk_path=$1
fqdn=$2
temp_directory=$3
vc_out_filepath=$4
ipop_serverinfo_url=$5 # url to store/fetch ipopserver.info file
ipop_client=$6 # 0 if ipopserver.info file needs to be fetched or 1 if file needs to be installed


# get the path to this script
pushd `dirname $0` > /dev/null
SCRIPTPATH=`pwd`
popd > /dev/null

fe_fqdn=`echo "cat /vc/frontend/public/@fqdn" | xmllint --shell $vc_out_filepath | grep = | awk -F \" '{print $2}'`
node_hostname=""
if [ "x$fqdn" = "x$fe_fqdn" ]; then
	# this is a frontend
	xml_file="$vc_out_filepath"
	node_hostname=`echo $fqdn |awk -F. '{ print $1 }'`
else 
	# this is a compute node and we have created all the xml file in allocate
	# they are in temp_dir/hostname.xml
	xml_file="$temp_directory/$fqdn.xml"
	node_number=${fqdn#compute-}
	cluster_name=`echo $fe_fqdn |awk -F. '{ print $1 }'`
	node_hostname=`/opt/rocks/bin/rocks list cluster $cluster_name | awk -v node=$node_number 'NR >= (node + 3) && NR < (node + 4) {print $2} '`
fi

#
#    ----------------       fixing the disk image  -------------------
#
tmp_folder=`mktemp -d`

# Remove existing network configuration -- dynip generates new files 
# (if not here, dynip will create network interfaces on eth2/eth3 instead of eth0/eth1)
nas=`rocks list host vm nas | grep "^${node_hostname}:" | grep -v "\-\-\-" | tr -s ' ' | cut -f 2 -d' '`
if [ "${nas}" != "" ]; then
	phy_frontend=`rocks list host attr  localhost | grep Frontend | cut -f 1 -d:`
	disk=`rocks list host storagedev $phy_frontend | grep ${node_hostname}-vol | tr -s ' ' | cut -f 1 -d' '`
  	temp_disk_path="/dev/$disk"
fi
waitUntilCmdTrue "! -d ${tmp_folder}/tmp" "guestmount -a $temp_disk_path -i $tmp_folder" $NAS_WAIT_PERIOD

if [ -f "$tmp_folder/etc/udev/rules.d/70-persistent-net.rules" ]; then
	mv "$tmp_folder/etc/udev/rules.d/70-persistent-net.rules" "$tmp_folder/root/70-persistent-net.rules.old"
fi
for script in `ls $tmp_folder/etc/sysconfig/network-scripts/ifcfg-eth*`; do
	scriptname=`basename $script`
	mv -f $script $tmp_folder/etc/sysconfig/network-scripts/old-$scriptname
done

# initialize ipop
if [ "$ipop_serverinfo_url" != "" ]; then
	# if ipop client, install ipopserver.info file
	if [ $ipop_client -eq 1 ]; then	
		if [ -e "$tmp_folder/$IPOP_CONFIG" ]; then
			rm -f $tmp_folder/$IPOP_CONFIG
		fi
		protocol=`echo $ipop_serverinfo_url | sed 's#://.*# #'`
		ipop_serverinfo_file=""
		while [ "true" = "true" ]; do
			if [ "$protocol" = "file" ]; then
				ipop_serverinfo_file=`echo $ipop_serverinfo_url | sed 's#file://##'`
			else # assume http
				ipop_serverinfo_file=`mktemp /tmp/ipopserver.info.XXXX`
				wget -O $ipop_serverinfo_file "${ipop_serverinfo_url}&action=get"
			fi
			if [ -s "$ipop_serverinfo_file" ]; then
				break;
			fi
			sleep $IPOPCLIENT_WAIT_PERIOD
		done
		cp $ipop_serverinfo_file $tmp_folder/$IPOP_SERVER_INFO
	else 
		# if ipop server, then tell it to initialize itself
		echo "Writing IPOP initialization file on frontend"
		touch $tmp_folder/opt/ipop/ejabberd/etc/init.boot
		echo "Forcing TURN to initialize on boot on frontend"
		if [ -e "$tmp_folder/$IPOP_TURN_CONFIG" ]; then
			rm -f $tmp_folder/$IPOP_TURN_CONFIG
		fi
		# clear out the boot log because we look for IPOP services to be started below
		cp $tmp_folder/var/log/boot.log $tmp_folder/var/log/boot.log.old
		echo > $tmp_folder/var/log/boot.log 
	fi
fi



# copy the vc-out.xml
cp $xml_file $tmp_folder/root/vc-out.xml

fusermount -u $tmp_folder || error "unable to unmount $tmp_folder"
if [ "${nas}" != "" ]; then
	waitUntilCmdTrue "0 -eq 0" \
		"/opt/rocks/bin/rocks list host storagemap ${nas} | grep ${node_hostname}-vol | grep mapped" \
		$NAS_WAIT_PERIOD
	/opt/rocks/bin/rocks remove host storagemap ${nas} ${node_hostname}-vol
	waitUntilCmdTrue "0 -eq 0" \
		"/opt/rocks/bin/rocks list host storagemap ${nas} | grep ${node_hostname}-vol | grep unmapped" \
		$NAS_WAIT_PERIOD
fi

#
#    ----------------       deploying disk image and booting  -------------------
#
# match everything except 'HOST' and a line of -----

if [ "${nas}" = "" ]; then
	container=`/opt/rocks/bin/rocks list host vm $node_hostname | awk '{if (! /---*/ && ! /HOST/) print $5}'`
	disk_path=`/opt/rocks/bin/rocks list host vm $node_hostname showdisks=1 | awk ' {if (/file/) print $7}'`
	# remove useless stuff from file path
	disk_path=${disk_path#file:}
	disk_path=${disk_path/,*/}
	
	localhost=`hostname -s`
	
	echo Destination disk path is $container:$disk_path
	
	if [ "$container" = "$localhost" ];then
		cp --sparse=always "$temp_disk_path" "$disk_path" \
			|| error "unable to copy the disk image $temp_disk_path to $disk_path"
	elif [ "$container" != "$localhost" ]; then
	       	scpcmd="rsync -S $temp_disk_path $container:$disk_path"
	       	echo $scpcmd
	       	$scpcmd || error "unable to copy the disk image $temp_disk_path to $container:$disk_path"
	fi
fi

# do not install just boot the system as it is
/opt/rocks/bin/rocks set host boot $node_hostname action=os
/opt/rocks/bin/rocks start host vm $node_hostname

# if this is the ipop server, then we need to fetch the ipopserver.info file
if [ "$ipop_serverinfo_url" != "" -a $ipop_client -eq 0 ]; then	
	# Wait till frontend has initialized IPOP
	ipop_initialized=0
	while [ $ipop_initialized -eq 0  ]; do
		sleep $IPOPSERVER_WAIT_PERIOD
		guestmount -d $node_hostname -i --ro $tmp_folder || error "unable to mount frontend FS"
		grep "Starting gvpn_controller" $tmp_folder/var/log/boot.log 
		if [ $? == 0 -a -s "$tmp_folder/$IPOP_SERVER_INFO" ]; then
			ipop_initialized=1
			break;
		fi
		fusermount -u $tmp_folder || error "unable to unmount $tmp_folder"
	done
	protocol=`echo $ipop_serverinfo_url | sed 's#://.*# #'`
	if [ "$protocol" = "file" ]; then
		ipop_serverinfo_file=`echo $ipop_serverinfo_url | sed 's#file://##'`
		grep -v ip4 $tmp_folder/$IPOP_SERVER_INFO > $ipop_serverinfo_file
	else # assume http
		ipop_serverinfo=`grep -v ip4 $tmp_folder/$IPOP_SERVER_INFO`
		ipop_serverinfo_urlsnip=`echo $ipop_serverinfo | sed 's/ /\&/g'`
		wget -O - "${ipop_serverinfo_url}&action=put&${ipop_serverinfo_urlsnip}"
	fi
	fusermount -u $tmp_folder || error "unable to unmount $tmp_folder"
fi

rmdir $tmp_folder
