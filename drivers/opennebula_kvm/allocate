#!/bin/env ruby

# Port require_relative back to ruby 1.8.x
# Taken from http://stackoverflow.com/questions/4333286/ruby-require-vs-require-relative-best-practice-to-workaround-running-in-both
unless Kernel.respond_to?(:require_relative)
  module Kernel
    def require_relative(path)
      require File.join(File.dirname(caller[0]), path.to_str)
    end
  end
end

require_relative "opennebula/settings.rb"
require_relative "opennebula/api.rb"
require_relative "opennebula/utils.rb"
require "rubygems"
require "nokogiri"
require "logger"
require "json"
require "open4"
require "ipaddr"
include OpenNebula

$logger = Logger.new(LOG_FILE)


class Allocator

    public

    def initialize(vc_in, num_compute, temp_path, public_key)
        # TODO: Handle incorrect pubkey path
        @temp_path = temp_path
        @public_key = File.read(public_key)
        @name = File.basename(vc_in, ".*")
        @vc_in = Nokogiri::XML(open(vc_in))
        @basepath = File.dirname(vc_in)
        @num_compute = Integer(num_compute)
        @client = Client.new(CREDENTIALS, ENDPOINT, {:timeout => TIMEOUT})
        username, password = CREDENTIALS.split(":")
        @cloud_client = Service::Client.new(
            :username   => username,
            :password   => password,
            :url        => ONEFLOW_URL,
            :user_agent => USER_AGENT
        )
        @cloud_client.set_timeout TIMEOUT

        # Modify images with pragma-makeover
        $logger.info "Modifing images..."
        driver_dir = File.dirname File.expand_path __FILE__
        execute "cd #{driver_dir}/pragma_makeover && ./pragma-makeover.pl #{vc_in}"

        @leases = generate_leases
        @network = allocate_network
        @frontend = allocate_frontend
        @compute = allocate_compute
        @flow = allocate_flow
    end

    def vc_out
        Nokogiri::XML::Builder.new do |xml|
            xml.vc {
                xml.frontend {
                    xml.public(:fqdn => "", :ip => "", :netmask => "", :gw => "")
                    xml.private(:ip => "", :netmask => "")
                }
                xml.compute(:count => "") {
                    xml.node(:name => "", :mac => "", :ip => "")
                    xml.node(:name => "", :mac => "", :ip => "")
                }
                xml.network {
                    xml.dns(:ip => "", :search => "", :domain => "")
                }
            }
        end
    end

    def instantiate
        $logger.info "Instantiating..."
        json_str = Service.build_json_action('instantiate')
        response = @cloud_client.post("/service_template/#{@flow["DOCUMENT"]["ID"]}/action", json_str)
        if CloudClient::is_error?(response)
            abort(response.to_s)
        end
        JSON.parse(response.body)
    end

    private

    def allocate_network
        $logger.info "Allocating network..."
        network = @vc_in.search("//vc/networks/network")[0]  # Assume there is only 1 network entry
        template = <<-EOT
        NAME = #{network["name"]}
        TYPE = FIXED
        NETWORK_ADDRESS = #{network.search("ipaddress")[0].content}
        NETWORK_MASK = #{network.search("netmask")[0].content}
        DNS = #{@leases[0][0]}
        BRIDGE = #{PRIVATE_BRIDGE}
        EOT
        @leases.each do |lease|
            template << <<-EOT
            LEASES = [ IP = #{lease[0]}, MAC = #{lease[1]}]
            EOT
        end
        xml = OpenNebula::VirtualNetwork.build_xml
        network = OpenNebula::VirtualNetwork.new(xml, @client)
        response = network.allocate(template)
        if OpenNebula.is_error?(response)
            abort(response.message)
        end
        response = network.info
        if OpenNebula.is_error?(response)
            abort(response.message)
        end
        network
    end

    def allocate_image(disk, persistent=false)
        $logger.info "Allocating image..."
        image_file = File.join(@basepath, disk.search("source")[0]["file"])
        inject_context_script image_file

        if File.extname(image_file) == ".gz"
            $logger.info "Decompressing image..."
            image_file = decompress(image_file, @temp_path)
        end

        template = <<-EOT
        NAME = #{image_file.gsub "/", "__"}
        PATH = #{image_file}
        TYPE = OS
        DRIVER = #{disk.search("driver")[0]["type"]}
        DESCRIPTION = ""
        EOT
        if persistent
            template << "PERSISTENT = YES\n"
        end

        $logger.info "Registering image..."
        xml = OpenNebula::Image.build_xml
        image = OpenNebula::Image.new(xml, @client)
        response = image.allocate(template, DATASTORE_ID)
        if OpenNebula.is_error?(response)
            abort(response.message)
        end
        response = image.info
        if OpenNebula.is_error?(response)
            abort(response.message)
        end
        image
    end

    def allocate_template(vm)
        $logger.info "Allocating template..."
        # Create cluster_hosts
        # e.g.
        #192.168.57.204   hosted-vm-0-0-1
        #192.168.57.205   hosted-vm-0-0-2
        frontend, *computes = @leases

        cluster_hosts = <<-EOT
#{frontend[0]}    #{@vc_in.search("//vc/frontend/domain/name")[0].content}
        EOT
        computes_xml = <<-EOT
        EOT
        hostname_array = "declare -A PRAGMA_CMP_HOSTNAME=( "
        cmp_mac_array = "declare -A PRAGMA_CMP_MAC=( "

        computes.each_with_index do |lease, index|
            hostname = "#{@vc_in.search("//vc/compute/domain/name")[0].content}-#{index}"
            cluster_hosts << <<-EOT
#{lease[0]}    #{hostname}
            EOT
            computes_xml << <<-EOT
<node name='#{hostname}' mac='#{lease[1]}' ip='#{lease[0]}' cpus='#{@num_compute}'/>
            EOT
            hostname_array << "['#{lease[0]}']='#{hostname}' "
            cmp_mac_array << "['#{lease[0]}']='#{lease[1]}' "
        end

        hostname_array << ")"
        cmp_mac_array << ")"

        fe_mac_array = "declare -A PRAGMA_FE_MAC=( "
        PUBLIC_NETWORK_LEASES.each do |ip, mac|
            fe_mac_array << "['#{ip}']='#{mac}' "
        end
        fe_mac_array << ")"

        # TODO: Import SSH PUBKEY
        template = <<-EOT
        NAME = "#{vm.search("domain/name")[0].content}"
        CPU = #{vm.search("domain/vcpu")[0].content}
        VCPU = #{vm.search("domain/vcpu")[0].content}
        MEMORY = #{Integer(vm.search("domain/memory")[0].content) / 1024}
        OS = [ BOOT = "hd", ARCH = "x86_64" ]
        CONTEXT = [
            NETWORK                 = "YES",
            PRAGMA_DOMAIN           = "#{DOMAIN}",
            PRAGMA_CLUSTER_HOSTS    = "#{cluster_hosts}",
            PRAGMA_NUM_COMPUTE      = "#{@num_compute}",
            PRAGMA_FE_NAME          = "#{@vc_in.search("//vc/frontend/domain/name")[0].content}",
            PRAGMA_FE_SHORTNAME     = "#{@vc_in.search("//vc/frontend/domain/name")[0].content}",
            PRAGMA_FE_PUB_NIC       = "eth1",
            PRAGMA_FE_PRIV_NIC      = "eth0",
            PRAGMA_FE_PRIV_MAC      = "#{frontend[1]}",
            PRAGMA_FE_PRIV_IP       = "#{frontend[0]}",
            PRAGMA_FE_MAC_ARRAY     = "#{fe_mac_array}",
            PRAGMA_CMP_PRIV_NIC     = "eth0",
            PRAGMA_CMP_HOSTNAME_ARRAY = "#{hostname_array}",
            PRAGMA_CMP_MAC_ARRAY    = "#{cmp_mac_array}",
            PRAGMA_PRIV_DNS         = "$NETWORK[DNS, NETWORK=\\"#{@network.name}\\"]",
            PRAGMA_PRIV_NETMASK     = "$NETWORK[NETWORK_MASK, NETWORK=\\"#{@network.name}\\"]",
            PRAGMA_PRIV_NETWORK     = "$NETWORK[NETWORK_ADDRESS, NETWORK=\\"#{@network.name}\\"]",
            PRAGMA_PUB_DNS          = "$NETWORK[DNS, NETWORK=\\"#{PUBLIC_NETWORK}\\"]",
            PRAGMA_PUB_NETMASK      = "$NETWORK[NETWORK_MASK, NETWORK=\\"#{PUBLIC_NETWORK}\\"]",
            PRAGMA_PUB_NETWORK      = "$NETWORK[NETWORK_ADDRESS, NETWORK=\\"#{PUBLIC_NETWORK}\\"]",
            PRAGMA_CONTEXT          = "true",
            PRAGMA_COMPUTES_XML     = "#{computes_xml}",
            SSH_PUBLIC_KEY          = "#{@public_key}"
        ]
        GRAPHICS = [ 
            TYPE    = "vnc",
            LISTEN  = "0.0.0.0"
        ]
        EOT

        # NIC = [ 
        #     NETWORK = #{@network.name},
        #     MODEL = #{vm.search("domain/devices/interface/model")[0]["type"]},
        #     MAC = #{frontend[1]}
        # ]

        if vm.name == "frontend"
            template << <<-EOT
            DISK = [ IMAGE = #{@frontend["image"].name} ]
            NIC = [ 
                NETWORK = #{@network.name},
                MODEL = #{vm.search("domain/devices/interface/model")[0]["type"]},
                IP = #{frontend[0]}
            ]
            NIC = [
                NETWORK = #{PUBLIC_NETWORK},
                MODEL = #{vm.search("domain/devices/interface/model")[1]["type"]}
            ]
            EOT
        else
            template << <<-EOT
            DISK = [ IMAGE = "#{@compute["image"].name}" ]
            NIC = [ 
                NETWORK = #{@network.name},
                MODEL = #{vm.search("domain/devices/interface/model")[0]["type"]}
            ]
            EOT
        end

        xml = OpenNebula::Template.build_xml
        vm = OpenNebula::Template.new(xml, @client)
        response = vm.allocate(template)
        if OpenNebula.is_error?(response)
            abort(response.message)
        end
        response = vm.info
        if OpenNebula.is_error?(response)
            abort(response.message)
        end
        vm
    end

    def allocate_frontend
        $logger.info "Allocating frontend..."
        @frontend = {}
        @frontend["image"] = allocate_image(@vc_in.search("//vc/frontend/domain/devices/disk")[0], persistent=true)
        @frontend["template"] = allocate_template @vc_in.search("//vc/frontend")[0]
        @frontend
    end

    def allocate_compute
        $logger.info "Allocating compute..."
        @compute = {}
        @compute["image"] = allocate_image @vc_in.search("//vc/compute/domain/devices/disk")[0]
        @compute["template"] = allocate_template @vc_in.search("//vc/compute")[0]
        @compute
    end

    def allocate_flow
        $logger.info "Allocating flow..."
        template = <<-EOT
        {
            "name": "#{@name}",
            "deployment": "straight",
            "roles": [
                {
                    "name": "frontend",
                    "vm_template": #{@frontend["template"].id}
                },
                {
                    "name": "compute",
                    "parents": [
                        "frontend"
                    ],
                    "vm_template": #{@compute["template"].id},
                    "cardinality": #{@num_compute}
                }
            ]
        }
        EOT
        response = @cloud_client.post("/service_template", template)
        if CloudClient::is_error?(response)
            abort(response.to_s)
        end
        JSON.parse(response.body)
    end

    def public_network
        vn_pool = VirtualNetworkPool.new(@client, -1)
        response = vn_pool.info
        if OpenNebula.is_error?(response)
            abort(response.message)
        end
        vn_pool.each do |vn|
            if vn.name == PUBLIC_NETWORK
                response = vn.info
                if OpenNebula.is_error?(response)
                    abort(response.message)
                end
                return vn
            end
        end
        abort("Public network mismatch")
    end

    def execute(command)
        pid, stdin, stdout, stderr = Open4::popen4(command)
        $logger.info "[stdout] " + stdout.read
        $logger.info "[stderr] " + stderr.read
        stdin.close
        stdout.close
        stderr.close
    end

    def generate_leases
        $logger.info "Generating leases..."
        leases = []
        network = @vc_in.search("//vc/networks/network/ipaddress")[0].content
        netmask = @vc_in.search("//vc/networks/network/netmask")[0].content
        ip = IPAddr.new("#{network}/#{netmask}")
        ip = ip.succ  # Skip to frontend ip
        # Note, there are some restriction for generating MAC
        # See http://en.wikipedia.org/wiki/MAC_address
        leases << [ip, "fe:" + (1..5).map{"%0.2X"%rand(256)}.join(":").downcase]
        ip = ip.succ  # Skip to compute ip range
        (@num_compute).times do |count|
            leases << [ip, "fe:" + (1..5).map{"%0.2X"%rand(256)}.join(":").downcase]
            ip = ip.succ
        end
        $logger.debug leases
        leases
    end

end


num_compute = Integer(ARGV[0])
vc_in = ARGV[1]
temp_path = ARGV[3]
public_key = ARGV[4]
allocator = Allocator.new(vc_in, num_compute, temp_path, public_key)
allocator.instantiate
File.open(ARGV[2], "w") do |file|
    file.write(allocator.vc_out.to_xml)
end
