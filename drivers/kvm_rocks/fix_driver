#!/bin/bash
#
# Clem
#
# This script is used to fix a vritual image on the current machine



if [ "x$#" != "x3" ]; then 
    echo "This script should be invoked with 3 arguments"
    exit 1
fi

function error(){
    echo -e "Error $1"
    exit 1
}

# tree required arguments
xml_file=$1
interfaces=$2
temp_path=$3


# creating the pool
transferpool_path=`mktemp -d -p $temp_path`
transferpool_name="transferimages"
virsh  pool-create-as $transferpool_name dir --target $transferpool_path

# creating network mapping file
v2v_conf=virt-v2v.xml
echo " <virt-v2v>" > $v2v_conf
for i in `echo $interfaces|tr ',' ' '`;do 
	echo "<network type='bridge' name='$i'><network type='bridge' name='$i'/></network>" >> $v2v_conf;
done
echo "</virt-v2v>" >> $v2v_conf

#
# running vrit-v2v
#
echo "virt-v2v  -f $v2v_conf -f /var/lib/virt-v2v/virt-v2v.db -i libvirtxml -oa sparse -os $transferpool_name \
		$xml_file  2>&1  || error Failed to execute virt-v2v"
virt-v2v  -f $v2v_conf -f /var/lib/virt-v2v/virt-v2v.db -i libvirtxml -oa sparse -os $transferpool_name \
		$xml_file  2>&1  || error "Failed to execute virt-v2v\nDelete transfer pool manually virsh pool-destroy $transferpool_name."

# get the xml from libvirt
domain_name=`echo "cat //domain/name" | xmllint --shell $xml_file | sed '/^\/ >/d' | sed 's/<[^>]*.//g'`
virsh dumpxml $domain_name > $xml_file || error "Unable to dump domaind xml."
virsh undefine $domain_name || error "Unable to undefine the domain."

# removing the pool
disk_filename=`ls $transferpool_path`
mv $transferpool_path/$disk_filename $temp_path || error "Unable to rename the file $disk_filename\nDelete it manually\nvirsh pool-destroy $transferpool_name."
virsh pool-destroy $transferpool_name || error "Unable to delete $transferpool_name pool.\nDelete it manually\nvirsh pool-destroy $transferpool_name."
#virsh pool-undefine $transferpool_name || error "Unable to delete $transferpool_name pool.\nDelete it manually."

rmdir $transferpool_path
rm $v2v_conf

