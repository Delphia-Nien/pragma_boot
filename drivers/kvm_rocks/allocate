#!/bin/bash -x
#
# Clem
#
# This script is used to allocate the resource needed to start up a 
# virtual cluster
# 
# For info see README



if [ "x$#" != "x5" ]; then
    echo "This script should be invoked with 5 arguments"
    exit 1
fi

function error(){
    echo -e "Error $1"
    exit 1
}

# tree required arguments
numcpus=$1
vc_in=$2 # not used
vc_out=$3
temp_directory=$4
key=$5

# fix configuration parameters
# this should come out of a DB
# there's probably a better way to do this
cpus_per_node=`rocks list host vm-container | awk '{print $4}' | tail -1`
mem_compute=2024
# need to get the ceiling of the division (not the floor)
numnodes=$(( ($numcpus + $cpus_per_node - 1) / $cpus_per_node ))

# get the path to this script
pushd `dirname $0` > /dev/null
SCRIPTPATH=`pwd`
popd > /dev/null


#The network configuration file will contains the self explicative elements:
# public_ips="123.123.123.123"
# netmask="255.255.255.0"
# gw="123.123.123.1"
# dns="8.8.8.8"
# fqdn="fqdn_of_pubblic_ip.somehost.com"
# vlans=2-5
#
. $SCRIPTPATH/net_conf.conf

#
# need to find a free IP
#
/opt/rocks/bin/rocks list host interface |awk '{print $5}' > /tmp/usedIP
counter=0
for i in `echo $public_ips | tr ',' ' ' `; do
	counter=$(( $counter + 1 ))
	if ! grep $i /tmp/usedIP > /dev/null ; then
		public_ip=$i
		break
	fi
done
if [ ! "$public_ip" ] ; then
	echo Unable to find an available public IP
	echo All IPs are already allocated
	exit 1
fi

fqdn=`nslookup $public_ip | sed -n "s/.*arpa.*name = \(.*\)./\1/p"`
if [ ! "$fqdn" ] ; then
        echo Unable to find a FQDN
        echo terminating
	exit 1
fi


fe_hostname=`echo $fqdn |awk -F. '{ print $1 }'`

vlan=""
if [ "$vlans" != "" ]; then
  # assume comma separated list of ranges (e.g., vlans=2-4,6)
  for vlan_range in `echo $vlans | tr -s ',' '\n'`; do
    if [ ${#vlan_range} -eq 1 ]; then
      vlan_range="$vlan_range $vlan_range"
    fi
    vlan_seq_range=`echo $vlan_range | tr -s '-' ' '`;
    for id in `seq $vlan_seq_range`; do
      rocks list host interface | grep vlan${id} >& /dev/null
      if [ $? -ne 0 ]; then vlan="vlan=$id"; break; fi
    done
    if [ "$vlan" != "" ]; then break; fi
  done
  if [ "$vlan" = "" ]; then
    echo "Error, no available vlans left for virtual clusters"
    exit 1
  fi
fi

/opt/rocks/bin/rocks add cluster $public_ip $numnodes cpus-per-compute=$cpus_per_node mem-per-compute=$mem_compute fe-name=$fe_hostname $vlan

# we fix this on our rocks systems
private_ip="10.1.1.1"
private_netmask="255.255.0.0"

mac_public=`/opt/rocks/bin/rocks list host interface $fe_hostname | grep $public_ip | awk '{print $3}'`
# the private interface does not have the private IP assigne properly on the hosting system
mac_private=`/opt/rocks/bin/rocks list host interface $fe_hostname | grep eth0 | awk '{print $3}'`


#
# creation of the vc-out.xml
#
echo '<vc>' > $vc_out
echo "  <frontend>" >> $vc_out
echo "    <public fqdn=\"$fqdn\" ip=\"$public_ip\" netmask=\"$netmask\" gw=\"$gw\" mac=\"$mac_public\" />" >> $vc_out
echo "    <private ip=\"$private_ip\" netmask=\"$private_netmask\" mac=\"$mac_private\"/>" >> $vc_out
echo "  </frontend>" >> $vc_out
echo "  <compute count=\"$numnodes\">" >> $vc_out

# TODO support only 255 host and netmask of at least 
counter=254
temp_ip=`echo "$private_ip" | awk '{split($1,a,"."); print a[1]"."a[2]"."a[3]}'`
for i in `/opt/rocks/bin/rocks list cluster $fe_hostname | awk '{print $2}'|grep ^hosted`; do
	mac=`/opt/rocks/bin/rocks list host interface $i |awk '{print $3}' | tail -n 1`
        ip=$temp_ip.$counter
	internal_compute_name="compute-$(( 254 - $counter ))"
	echo "    <node name=\"$internal_compute_name\" mac=\"$mac\" ip=\"$ip\" cpus=\"$cpus_per_node\"/>" >> $vc_out
        counter=$(( $counter - 1 ))	

	node_xml="$temp_directory/$internal_compute_name.xml"
	# we generate the vc-out for the compute node here since we already have all the info
	echo -e "<vc>\n  <frontend>" > $node_xml
	echo "    <public fqdn=\"$fqdn\"/>" >> $node_xml
	echo "  </frontend>" >> $node_xml
	echo "  <compute>" >> $node_xml
	echo "    <private fqdn=\"$internal_compute_name\" ip=\"$ip\" netmask=\"$private_netmask\" gw=\"$private_ip\" mac=\"$mac\"/>" >> $node_xml
	echo -e "  </compute>\n  <network>" >> $node_xml
	echo "    <dns ip=\"$dns\" search=\"local\" domain=\"\"/>" >> $node_xml
	echo "  </network>" >> $node_xml
	echo "  <key>`cat $key`</key>" >> $node_xml
	echo "</vc>" >> $node_xml

done

echo "  </compute>" >> $vc_out
echo "  <network>" >> $vc_out
echo "    <dns ip=\"$dns\" search=\"local\" domain=\"\"/>" >> $vc_out
echo "  </network>" >> $vc_out
echo "  <key>`cat $key`</key>" >> $vc_out
echo "</vc>" >> $vc_out

