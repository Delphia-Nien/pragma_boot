#!/bin/bash
#
# Clem
#
# This script is used to allocate the resource needed to start up a 
# virtual cluster
# 
# For info see README



if [ "x$#" != "x5" ]; then
    echo "This script should be invoked with 5 arguments"
    exit 1
fi

function error(){
    echo -e "Error $1"
    exit 1
}

# tree required arguments
numcpus=$1
vc_in=$2 # not used
vc_out=$3
temp_directory=$4
key=$5

# fix configuration parameters
# this should come out of a DB
cpus_per_node=2
mem_compute=2024
# need to get the ceiling of the division (not the floor)
numnodes=$(( ($numcpus + $cpus_per_node - 1) / $cpus_per_node ))

# get the path to this script
pushd `dirname $0` > /dev/null
SCRIPTPATH=`pwd`
popd > /dev/null


#The network configuration file will contains the self explicative elements:
# public_ip="123.123.123.123"
# netmask="255.255.255.0"
# gw="123.123.123.1"
# dns="8.8.8.8"
# fqdn="fqdn_of_pubblic_ip.somehost.com"
#
. $SCRIPTPATH/net_conf.conf


rocks add cluster $public_ip $numnodes cpus-per-compute=$cpus_per_node mem-per-compute=$mem_compute fe-name=$fqdn

# we fix this on our rocks systems
private_ip="10.1.1.1"
private_netmask="255.255.0.0"

mac_public=`rocks list host interface $fqdn | grep $public_ip | awk '{print $3}'`
# the private interface does not have the private IP assigne properly on the hosting system
mac_private=`rocks list host interface $fqdn | grep eth0 | awk '{print $3}'`


#
# creation of the vc-out.xml
#
echo '<vc>' > $vc_out
echo "  <frontend>" >> $vc_out
echo "    <public fqdn=\"$fqdn\" ip=\"$public_ip\" netmask=\"$netmask\" gw=\"$gw\" mac=\"$mac_public\" />" >> $vc_out
echo "    <private ip=\"$private_ip\" netmask=\"$private_netmask\" mac=\"$mac_private\"/>" >> $vc_out
echo "  </frontend>" >> $vc_out
echo "  <compute count=\"$numnodes\">" >> $vc_out

# TODO support only 255 host and netmask of at least 
counter=254
temp_ip=`echo "$private_ip" | awk '{split($1,a,"."); print a[1]"."a[2]"."a[3]}'`
for i in `rocks list cluster calit2-119-222.ucsd.edu | awk '{print $2}'|grep ^hosted`; do 
	mac=`rocks list host interface $i |awk '{print $3}' | tail -n 1`
        ip=$temp_ip.$counter
	echo "    <node name=\"$i\" mac=\"$mac\" ip=\"$ip\" cpus=\"$cpus_per_node\"/>" >> $vc_out
        counter=$(( $counter - 1 ))	

	node_xml="$temp_directory/$i.xml"
	# we generate the vc-out for the compute node here since we already have all the info
	echo -e "<vc>\n  <compute>" > $node_xml
	echo "    <private fqdn=\"$i\" ip=\"$ip\" netmask=\"$private_netmask\" gw=\"$private_ip\" mac=\"$mac\"/>" >> $node_xml
	echo -e "  </compute>\n  <network>" >> $node_xml
	echo "    <dns ip=\"$dns\" search=\"local\" domain=\"\"/>" >> $node_xml
	echo "  </network>" >> $node_xml
	echo "  <key>`cat $key`</key>" >> $node_xml
	echo "</vc>" >> $node_xml

done

echo "  </compute>" >> $vc_out
echo "  <network>" >> $vc_out
echo "    <dns ip=\"$dns\" search=\"local\" domain=\"\"/>" >> $vc_out
echo "  </network>" >> $vc_out
echo "  <key>`cat $key`</key>" >> $vc_out
echo "</vc>" >> $vc_out

